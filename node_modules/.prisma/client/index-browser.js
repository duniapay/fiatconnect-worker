
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sid: 'sid',
  data: 'data',
  expiresAt: 'expiresAt'
};

exports.Prisma.TransferScalarFieldEnum = {
  transferId: 'transferId',
  quoteId: 'quoteId',
  transferAddress: 'transferAddress',
  accountId: 'accountId',
  amountProvided: 'amountProvided',
  amountReceived: 'amountReceived',
  fee: 'fee',
  fiatType: 'fiatType',
  cryptoType: 'cryptoType',
  transferType: 'transferType',
  fiatAccountId: 'fiatAccountId',
  txHash: 'txHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  transferStatus: 'transferStatus',
  status: 'status',
  events: 'events'
};

exports.Prisma.AccountScalarFieldEnum = {
  fiatAccountId: 'fiatAccountId',
  institutionName: 'institutionName',
  accountName: 'accountName',
  mobile: 'mobile',
  country: 'country',
  accountNumber: 'accountNumber',
  operator: 'operator',
  fiatAccountType: 'fiatAccountType',
  owner: 'owner',
  fiatAccountSchema: 'fiatAccountSchema',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KYCScalarFieldEnum = {
  id: 'id',
  kycSchemaName: 'kycSchemaName',
  owner: 'owner',
  status: 'status',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  selfieDocument: 'selfieDocument',
  identificationDocument: 'identificationDocument',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dateOfBirth: 'dateOfBirth'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.FiatType = {
  USD: 'USD',
  EUR: 'EUR',
  BRL: 'BRL',
  GNF: 'GNF',
  INR: 'INR',
  NGN: 'NGN',
  GHS: 'GHS',
  KES: 'KES',
  ZAR: 'ZAR',
  PHP: 'PHP',
  UGX: 'UGX',
  GBP: 'GBP',
  XOF: 'XOF',
  RWF: 'RWF',
  CNY: 'CNY',
  XAF: 'XAF',
  ARS: 'ARS',
  BOB: 'BOB',
  CLP: 'CLP',
  COP: 'COP',
  FKP: 'FKP',
  GYD: 'GYD',
  PYG: 'PYG',
  PEN: 'PEN',
  SRD: 'SRD',
  UYU: 'UYU',
  VES: 'VES',
  MXN: 'MXN',
  PAB: 'PAB'
};

exports.CryptoType = {
  cUSD: 'cUSD',
  cEUR: 'cEUR',
  cREAL: 'cREAL',
  CELO: 'CELO'
};

exports.TransferStatus = {
  TransferStarted: 'TransferStarted',
  TransferFiatFundsDebited: 'TransferFiatFundsDebited',
  TransferReceivedFiatFunds: 'TransferReceivedFiatFunds',
  TransferSendingCryptoFunds: 'TransferSendingCryptoFunds',
  TransferAmlFailedformattedBody: 'TransferAmlFailedformattedBody',
  TransferReadyForUserToSendCryptoFunds: 'TransferReadyForUserToSendCryptoFunds',
  TransferReceivedCryptoFunds: 'TransferReceivedCryptoFunds',
  TransferComplete: 'TransferComplete',
  TransferFailed: 'TransferFailed'
};

exports.FiatAccountType = {
  BankAccount: 'BankAccount',
  MobileMoney: 'MobileMoney',
  DuniaWallet: 'DuniaWallet'
};

exports.FiatAccountSchema = {
  AccountNumber: 'AccountNumber',
  MobileMoney: 'MobileMoney',
  DuniaWallet: 'DuniaWallet',
  IBANNumber: 'IBANNumber',
  IFSCAccount: 'IFSCAccount',
  PIXAccount: 'PIXAccount'
};

exports.KycStatus = {
  KycNotCreated: 'KycNotCreated',
  KycPending: 'KycPending',
  KycApproved: 'KycApproved',
  KycDenied: 'KycDenied',
  KycExpired: 'KycExpired'
};

exports.Prisma.ModelName = {
  Session: 'Session',
  Transfer: 'Transfer',
  Account: 'Account',
  KYC: 'KYC'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
