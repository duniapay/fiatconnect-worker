import { z } from 'zod';
export declare enum TransferType {
    TransferIn = "TransferIn",
    TransferOut = "TransferOut"
}
export declare const transferTypeSchema: z.ZodNativeEnum<typeof TransferType>;
export declare enum TransferStatus {
    TransferStarted = "TransferStarted",
    TransferWaitingForUserAction = "TransferWaitingForUserAction",
    TransferFiatFundsDebited = "TransferFiatFundsDebited",
    TransferReceivedFiatFunds = "TransferReceivedFiatFunds",
    TransferSendingCryptoFunds = "TransferSendingCryptoFunds",
    TransferAmlFailed = "TransferAmlFailed",
    TransferReadyForUserToSendCryptoFunds = "TransferReadyForUserToSendCryptoFunds",
    TransferReceivedCryptoFunds = "TransferReceivedCryptoFunds",
    TransferComplete = "TransferComplete",
    TransferFailed = "TransferFailed"
}
export declare const transferStatusSchema: z.ZodNativeEnum<typeof TransferStatus>;
export declare const transferInStatusPreTxSchema: z.ZodEnum<[TransferStatus.TransferStarted, TransferStatus.TransferWaitingForUserAction, TransferStatus.TransferFiatFundsDebited, TransferStatus.TransferReceivedFiatFunds, TransferStatus.TransferFailed]>;
export declare const transferInStatusPostTxSchema: z.ZodEnum<[TransferStatus.TransferSendingCryptoFunds, TransferStatus.TransferComplete]>;
export declare const transferOutStatusSchema: z.ZodEnum<[TransferStatus.TransferStarted, TransferStatus.TransferAmlFailed, TransferStatus.TransferReadyForUserToSendCryptoFunds, TransferStatus.TransferReceivedCryptoFunds, TransferStatus.TransferComplete, TransferStatus.TransferFailed]>;
export declare const transferRequestBodySchema: z.ZodObject<{
    fiatAccountId: z.ZodString;
    quoteId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    fiatAccountId: string;
    quoteId: string;
}, {
    fiatAccountId: string;
    quoteId: string;
}>;
export type TransferRequestBody = z.infer<typeof transferRequestBodySchema>;
export declare const transferOutResponseSchema: z.ZodObject<{
    transferId: z.ZodString;
    transferStatus: z.ZodNativeEnum<typeof TransferStatus>;
    transferAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
}, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
}>;
export type TransferOutResponse = z.infer<typeof transferOutResponseSchema>;
export declare const transferInResponseSchema: z.ZodObject<{
    transferId: z.ZodString;
    transferStatus: z.ZodNativeEnum<typeof TransferStatus>;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}>;
export type TransferInResponse = z.infer<typeof transferInResponseSchema>;
export declare const transferResponseSchema: z.ZodUnion<[z.ZodObject<{
    transferId: z.ZodString;
    transferStatus: z.ZodNativeEnum<typeof TransferStatus>;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    transferId: z.ZodString;
    transferStatus: z.ZodNativeEnum<typeof TransferStatus>;
    transferAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
}, {
    transferId: string;
    transferStatus: TransferStatus;
    transferAddress: string;
}>]>;
export type TransferResponse = z.infer<typeof transferResponseSchema>;
export declare const transferStatusRequestParamsSchema: z.ZodObject<{
    transferId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transferId: string;
}, {
    transferId: string;
}>;
export type TransferStatusRequestParams = z.infer<typeof transferStatusRequestParamsSchema>;
export declare const transferInStatusResponseSchema: z.ZodUnion<[z.ZodObject<{
    status: z.ZodEnum<[TransferStatus.TransferStarted, TransferStatus.TransferWaitingForUserAction, TransferStatus.TransferFiatFundsDebited, TransferStatus.TransferReceivedFiatFunds, TransferStatus.TransferFailed]>;
    transferType: z.ZodLiteral<TransferType.TransferIn>;
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    amountProvided: z.ZodString;
    amountReceived: z.ZodString;
    fee: z.ZodOptional<z.ZodString>;
    fiatAccountId: z.ZodString;
    transferId: z.ZodString;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferWaitingForUserAction | TransferStatus.TransferFiatFundsDebited | TransferStatus.TransferReceivedFiatFunds | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    fee?: string | undefined;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferWaitingForUserAction | TransferStatus.TransferFiatFundsDebited | TransferStatus.TransferReceivedFiatFunds | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    fee?: string | undefined;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    fiatAccountId: z.ZodString;
    transferId: z.ZodString;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
    transferType: z.ZodLiteral<TransferType.TransferIn>;
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    amountProvided: z.ZodString;
    amountReceived: z.ZodString;
    fee: z.ZodOptional<z.ZodString>;
    status: z.ZodEnum<[TransferStatus.TransferSendingCryptoFunds, TransferStatus.TransferComplete]>;
    txHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: TransferStatus.TransferSendingCryptoFunds | TransferStatus.TransferComplete;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    txHash: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}, {
    status: TransferStatus.TransferSendingCryptoFunds | TransferStatus.TransferComplete;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    txHash: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}>]>;
export declare const transferOutStatusResponseSchema: z.ZodObject<{
    fiatAccountId: z.ZodString;
    transferId: z.ZodString;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    amountProvided: z.ZodString;
    amountReceived: z.ZodString;
    fee: z.ZodOptional<z.ZodString>;
    transferType: z.ZodLiteral<TransferType.TransferOut>;
    status: z.ZodEnum<[TransferStatus.TransferStarted, TransferStatus.TransferAmlFailed, TransferStatus.TransferReadyForUserToSendCryptoFunds, TransferStatus.TransferReceivedCryptoFunds, TransferStatus.TransferComplete, TransferStatus.TransferFailed]>;
}, "strip", z.ZodTypeAny, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferAmlFailed | TransferStatus.TransferReadyForUserToSendCryptoFunds | TransferStatus.TransferReceivedCryptoFunds | TransferStatus.TransferComplete | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferOut;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferAmlFailed | TransferStatus.TransferReadyForUserToSendCryptoFunds | TransferStatus.TransferReceivedCryptoFunds | TransferStatus.TransferComplete | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferOut;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}>;
export declare const transferStatusResponseSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    status: z.ZodEnum<[TransferStatus.TransferStarted, TransferStatus.TransferWaitingForUserAction, TransferStatus.TransferFiatFundsDebited, TransferStatus.TransferReceivedFiatFunds, TransferStatus.TransferFailed]>;
    transferType: z.ZodLiteral<TransferType.TransferIn>;
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    amountProvided: z.ZodString;
    amountReceived: z.ZodString;
    fee: z.ZodOptional<z.ZodString>;
    fiatAccountId: z.ZodString;
    transferId: z.ZodString;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferWaitingForUserAction | TransferStatus.TransferFiatFundsDebited | TransferStatus.TransferReceivedFiatFunds | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    fee?: string | undefined;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferWaitingForUserAction | TransferStatus.TransferFiatFundsDebited | TransferStatus.TransferReceivedFiatFunds | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    fee?: string | undefined;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    fiatAccountId: z.ZodString;
    transferId: z.ZodString;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
    transferType: z.ZodLiteral<TransferType.TransferIn>;
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    amountProvided: z.ZodString;
    amountReceived: z.ZodString;
    fee: z.ZodOptional<z.ZodString>;
    status: z.ZodEnum<[TransferStatus.TransferSendingCryptoFunds, TransferStatus.TransferComplete]>;
    txHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: TransferStatus.TransferSendingCryptoFunds | TransferStatus.TransferComplete;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    txHash: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}, {
    status: TransferStatus.TransferSendingCryptoFunds | TransferStatus.TransferComplete;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferIn;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    txHash: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}>]>, z.ZodObject<{
    fiatAccountId: z.ZodString;
    transferId: z.ZodString;
    transferAddress: z.ZodString;
    userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
        pixString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
        iban: z.ZodString;
        bic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    }>, z.ZodObject<{
        userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
        institutionName: z.ZodString;
        accountName: z.ZodString;
        accountNumber: z.ZodString;
        transactionReference: z.ZodOptional<z.ZodString>;
        deadline: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }, {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    }>]>>;
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    amountProvided: z.ZodString;
    amountReceived: z.ZodString;
    fee: z.ZodOptional<z.ZodString>;
    transferType: z.ZodLiteral<TransferType.TransferOut>;
    status: z.ZodEnum<[TransferStatus.TransferStarted, TransferStatus.TransferAmlFailed, TransferStatus.TransferReadyForUserToSendCryptoFunds, TransferStatus.TransferReceivedCryptoFunds, TransferStatus.TransferComplete, TransferStatus.TransferFailed]>;
}, "strip", z.ZodTypeAny, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferAmlFailed | TransferStatus.TransferReadyForUserToSendCryptoFunds | TransferStatus.TransferReceivedCryptoFunds | TransferStatus.TransferComplete | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferOut;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}, {
    status: TransferStatus.TransferStarted | TransferStatus.TransferAmlFailed | TransferStatus.TransferReadyForUserToSendCryptoFunds | TransferStatus.TransferReceivedCryptoFunds | TransferStatus.TransferComplete | TransferStatus.TransferFailed;
    fiatAccountId: string;
    transferId: string;
    transferAddress: string;
    transferType: TransferType.TransferOut;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    amountProvided: string;
    amountReceived: string;
    userActionDetails?: {
        userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
        pixString: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
        iban: string;
        bic: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
        url: string;
    } | {
        userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
        institutionName: string;
        accountName: string;
        accountNumber: string;
        transactionReference?: string | undefined;
        deadline?: string | undefined;
    } | undefined;
    fee?: string | undefined;
}>]>;
export type TransferStatusResponse = z.infer<typeof transferStatusResponseSchema>;
