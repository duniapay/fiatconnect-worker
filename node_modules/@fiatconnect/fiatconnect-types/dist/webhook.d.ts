import { z } from 'zod';
export declare enum WebhookEventType {
    KycStatusEvent = "WebhookKycStatusEvent",
    TransferInStatusEvent = "WebhookTransferInStatusEvent",
    TransferOutStatusEvent = "WebhookTransferOutStatusEvent"
}
export declare const webhookEventTypeSchema: z.ZodNativeEnum<typeof WebhookEventType>;
export declare const webhookRequestBodyTransferInSchema: z.ZodIntersection<z.ZodObject<{
    provider: z.ZodString;
    eventId: z.ZodString;
    timestamp: z.ZodString;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}>, z.ZodObject<{
    eventType: z.ZodLiteral<WebhookEventType.TransferInStatusEvent>;
    payload: z.ZodUnion<[z.ZodObject<{
        status: z.ZodEnum<[import("./transfer").TransferStatus.TransferStarted, import("./transfer").TransferStatus.TransferWaitingForUserAction, import("./transfer").TransferStatus.TransferFiatFundsDebited, import("./transfer").TransferStatus.TransferReceivedFiatFunds, import("./transfer").TransferStatus.TransferFailed]>;
        transferType: z.ZodLiteral<import("./transfer").TransferType.TransferIn>;
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        amountProvided: z.ZodString;
        amountReceived: z.ZodString;
        fee: z.ZodOptional<z.ZodString>;
        fiatAccountId: z.ZodString;
        transferId: z.ZodString;
        transferAddress: z.ZodString;
        userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
            pixString: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
            iban: z.ZodString;
            bic: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
            institutionName: z.ZodString;
            accountName: z.ZodString;
            accountNumber: z.ZodString;
            transactionReference: z.ZodOptional<z.ZodString>;
            deadline: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    }, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        fiatAccountId: z.ZodString;
        transferId: z.ZodString;
        transferAddress: z.ZodString;
        userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
            pixString: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
            iban: z.ZodString;
            bic: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
            institutionName: z.ZodString;
            accountName: z.ZodString;
            accountNumber: z.ZodString;
            transactionReference: z.ZodOptional<z.ZodString>;
            deadline: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }>]>>;
        transferType: z.ZodLiteral<import("./transfer").TransferType.TransferIn>;
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        amountProvided: z.ZodString;
        amountReceived: z.ZodString;
        fee: z.ZodOptional<z.ZodString>;
        status: z.ZodEnum<[import("./transfer").TransferStatus.TransferSendingCryptoFunds, import("./transfer").TransferStatus.TransferComplete]>;
        txHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }, {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    eventType: WebhookEventType.TransferInStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    } | {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}, {
    eventType: WebhookEventType.TransferInStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    } | {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}>>;
export type WebhookRequestBodyTransferIn = z.infer<typeof webhookRequestBodyTransferInSchema>;
export declare const webhookRequestBodyTransferOutSchema: z.ZodIntersection<z.ZodObject<{
    provider: z.ZodString;
    eventId: z.ZodString;
    timestamp: z.ZodString;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}>, z.ZodObject<{
    eventType: z.ZodLiteral<WebhookEventType.TransferOutStatusEvent>;
    payload: z.ZodObject<{
        fiatAccountId: z.ZodString;
        transferId: z.ZodString;
        transferAddress: z.ZodString;
        userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
            pixString: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
            iban: z.ZodString;
            bic: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
            institutionName: z.ZodString;
            accountName: z.ZodString;
            accountNumber: z.ZodString;
            transactionReference: z.ZodOptional<z.ZodString>;
            deadline: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }>]>>;
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        amountProvided: z.ZodString;
        amountReceived: z.ZodString;
        fee: z.ZodOptional<z.ZodString>;
        transferType: z.ZodLiteral<import("./transfer").TransferType.TransferOut>;
        status: z.ZodEnum<[import("./transfer").TransferStatus.TransferStarted, import("./transfer").TransferStatus.TransferAmlFailed, import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds, import("./transfer").TransferStatus.TransferReceivedCryptoFunds, import("./transfer").TransferStatus.TransferComplete, import("./transfer").TransferStatus.TransferFailed]>;
    }, "strip", z.ZodTypeAny, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    eventType: WebhookEventType.TransferOutStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}, {
    eventType: WebhookEventType.TransferOutStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}>>;
export type WebhookRequestBodyTransferOut = z.infer<typeof webhookRequestBodyTransferOutSchema>;
export declare const webhookRequestBodyKycSchema: z.ZodIntersection<z.ZodObject<{
    provider: z.ZodString;
    eventId: z.ZodString;
    timestamp: z.ZodString;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}>, z.ZodObject<{
    eventType: z.ZodLiteral<WebhookEventType.KycStatusEvent>;
    payload: z.ZodObject<{
        kycSchema: z.ZodNativeEnum<typeof import("./kyc").KycSchema>;
        kycStatus: z.ZodNativeEnum<typeof import("./kyc").KycStatus>;
    }, "strip", z.ZodTypeAny, {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    }, {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    }>;
}, "strip", z.ZodTypeAny, {
    eventType: WebhookEventType.KycStatusEvent;
    payload: {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    };
}, {
    eventType: WebhookEventType.KycStatusEvent;
    payload: {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    };
}>>;
export type WebhookRequestBodyKyc = z.infer<typeof webhookRequestBodyKycSchema>;
export declare const webhookRequestBodySchema: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
    provider: z.ZodString;
    eventId: z.ZodString;
    timestamp: z.ZodString;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}>, z.ZodObject<{
    eventType: z.ZodLiteral<WebhookEventType.TransferInStatusEvent>;
    payload: z.ZodUnion<[z.ZodObject<{
        status: z.ZodEnum<[import("./transfer").TransferStatus.TransferStarted, import("./transfer").TransferStatus.TransferWaitingForUserAction, import("./transfer").TransferStatus.TransferFiatFundsDebited, import("./transfer").TransferStatus.TransferReceivedFiatFunds, import("./transfer").TransferStatus.TransferFailed]>;
        transferType: z.ZodLiteral<import("./transfer").TransferType.TransferIn>;
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        amountProvided: z.ZodString;
        amountReceived: z.ZodString;
        fee: z.ZodOptional<z.ZodString>;
        fiatAccountId: z.ZodString;
        transferId: z.ZodString;
        transferAddress: z.ZodString;
        userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
            pixString: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
            iban: z.ZodString;
            bic: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
            institutionName: z.ZodString;
            accountName: z.ZodString;
            accountNumber: z.ZodString;
            transactionReference: z.ZodOptional<z.ZodString>;
            deadline: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    }, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        fiatAccountId: z.ZodString;
        transferId: z.ZodString;
        transferAddress: z.ZodString;
        userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
            pixString: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
            iban: z.ZodString;
            bic: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
            institutionName: z.ZodString;
            accountName: z.ZodString;
            accountNumber: z.ZodString;
            transactionReference: z.ZodOptional<z.ZodString>;
            deadline: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }>]>>;
        transferType: z.ZodLiteral<import("./transfer").TransferType.TransferIn>;
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        amountProvided: z.ZodString;
        amountReceived: z.ZodString;
        fee: z.ZodOptional<z.ZodString>;
        status: z.ZodEnum<[import("./transfer").TransferStatus.TransferSendingCryptoFunds, import("./transfer").TransferStatus.TransferComplete]>;
        txHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }, {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    eventType: WebhookEventType.TransferInStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    } | {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}, {
    eventType: WebhookEventType.TransferInStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferWaitingForUserAction | import("./transfer").TransferStatus.TransferFiatFundsDebited | import("./transfer").TransferStatus.TransferReceivedFiatFunds | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        fee?: string | undefined;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
    } | {
        status: import("./transfer").TransferStatus.TransferSendingCryptoFunds | import("./transfer").TransferStatus.TransferComplete;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferIn;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        txHash: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}>>, z.ZodIntersection<z.ZodObject<{
    provider: z.ZodString;
    eventId: z.ZodString;
    timestamp: z.ZodString;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}>, z.ZodObject<{
    eventType: z.ZodLiteral<WebhookEventType.TransferOutStatusEvent>;
    payload: z.ZodObject<{
        fiatAccountId: z.ZodString;
        transferId: z.ZodString;
        transferAddress: z.ZodString;
        userActionDetails: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PIXUserAction>;
            pixString: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.IBANUserAction>;
            iban: z.ZodString;
            bic: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.PSEUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.URLUserAction>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        }>, z.ZodObject<{
            userActionType: z.ZodLiteral<import("./common").TransferInUserActionDetails.AccountNumberUserAction>;
            institutionName: z.ZodString;
            accountName: z.ZodString;
            accountNumber: z.ZodString;
            transactionReference: z.ZodOptional<z.ZodString>;
            deadline: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }, {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        }>]>>;
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        amountProvided: z.ZodString;
        amountReceived: z.ZodString;
        fee: z.ZodOptional<z.ZodString>;
        transferType: z.ZodLiteral<import("./transfer").TransferType.TransferOut>;
        status: z.ZodEnum<[import("./transfer").TransferStatus.TransferStarted, import("./transfer").TransferStatus.TransferAmlFailed, import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds, import("./transfer").TransferStatus.TransferReceivedCryptoFunds, import("./transfer").TransferStatus.TransferComplete, import("./transfer").TransferStatus.TransferFailed]>;
    }, "strip", z.ZodTypeAny, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }, {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    eventType: WebhookEventType.TransferOutStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}, {
    eventType: WebhookEventType.TransferOutStatusEvent;
    payload: {
        status: import("./transfer").TransferStatus.TransferStarted | import("./transfer").TransferStatus.TransferAmlFailed | import("./transfer").TransferStatus.TransferReadyForUserToSendCryptoFunds | import("./transfer").TransferStatus.TransferReceivedCryptoFunds | import("./transfer").TransferStatus.TransferComplete | import("./transfer").TransferStatus.TransferFailed;
        fiatAccountId: string;
        transferId: string;
        transferAddress: string;
        transferType: import("./transfer").TransferType.TransferOut;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        amountProvided: string;
        amountReceived: string;
        userActionDetails?: {
            userActionType: import("./common").TransferInUserActionDetails.PIXUserAction;
            pixString: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.IBANUserAction;
            iban: string;
            bic: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.PSEUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.URLUserAction;
            url: string;
        } | {
            userActionType: import("./common").TransferInUserActionDetails.AccountNumberUserAction;
            institutionName: string;
            accountName: string;
            accountNumber: string;
            transactionReference?: string | undefined;
            deadline?: string | undefined;
        } | undefined;
        fee?: string | undefined;
    };
}>>, z.ZodIntersection<z.ZodObject<{
    provider: z.ZodString;
    eventId: z.ZodString;
    timestamp: z.ZodString;
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}, {
    address: string;
    provider: string;
    eventId: string;
    timestamp: string;
}>, z.ZodObject<{
    eventType: z.ZodLiteral<WebhookEventType.KycStatusEvent>;
    payload: z.ZodObject<{
        kycSchema: z.ZodNativeEnum<typeof import("./kyc").KycSchema>;
        kycStatus: z.ZodNativeEnum<typeof import("./kyc").KycStatus>;
    }, "strip", z.ZodTypeAny, {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    }, {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    }>;
}, "strip", z.ZodTypeAny, {
    eventType: WebhookEventType.KycStatusEvent;
    payload: {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    };
}, {
    eventType: WebhookEventType.KycStatusEvent;
    payload: {
        kycSchema: import("./kyc").KycSchema;
        kycStatus: import("./kyc").KycStatus;
    };
}>>]>;
export type WebhookRequestBody = z.infer<typeof webhookRequestBodySchema>;
