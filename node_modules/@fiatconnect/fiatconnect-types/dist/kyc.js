"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kycStatusResponseSchema = exports.kycRequestParamsSchema = exports.kycSchemasSchema = exports.personalDataAndDocumentsDetailedKycSchema = exports.personalDataAndDocumentsKycSchema = exports.identificationDocumentTypeSchema = exports.IdentificationDocumentType = exports.kycSchemaSchema = exports.KycSchema = exports.kycStatusSchema = exports.KycStatus = void 0;
const zod_1 = require("zod");
const common_1 = require("./common");
var KycStatus;
(function (KycStatus) {
    KycStatus["KycNotCreated"] = "KycNotCreated";
    KycStatus["KycPending"] = "KycPending";
    KycStatus["KycApproved"] = "KycApproved";
    KycStatus["KycDenied"] = "KycDenied";
    KycStatus["KycExpired"] = "KycExpired";
})(KycStatus || (exports.KycStatus = KycStatus = {}));
exports.kycStatusSchema = zod_1.z.nativeEnum(KycStatus, {
    description: 'kycStatusSchema',
});
/*
 * FiatConnect dynamic type definitions.
 *
 * The following types contain information about differet KYC Schemas
 * that are currently supported by payment providers. The types can be added to via a pull request to the FiatConnect
 * specification repo -- for example, when support for a new schema is added.
 *
 */
// When adding new schemas be sure to also update kycSchemasSchema
var KycSchema;
(function (KycSchema) {
    KycSchema["PersonalDataAndDocuments"] = "PersonalDataAndDocuments";
    KycSchema["PersonalDataAndDocumentsDetailed"] = "PersonalDataAndDocumentsDetailed";
})(KycSchema || (exports.KycSchema = KycSchema = {}));
exports.kycSchemaSchema = zod_1.z.nativeEnum(KycSchema, {
    description: 'kycSchemaSchema',
});
var IdentificationDocumentType;
(function (IdentificationDocumentType) {
    IdentificationDocumentType["IDC"] = "IDC";
    IdentificationDocumentType["PAS"] = "PAS";
    IdentificationDocumentType["DL"] = "DL";
})(IdentificationDocumentType || (exports.IdentificationDocumentType = IdentificationDocumentType = {}));
// need nonempty array types to get zod enums to compile
const documentsWithBack = [IdentificationDocumentType.IDC, IdentificationDocumentType.DL];
const documentsWithoutBack = Object.keys(IdentificationDocumentType).filter((idType) => !documentsWithBack.includes(idType));
const identificationDocumentTypeWithBackSchema = zod_1.z.enum(documentsWithBack);
const identificationDocumentTypeWithoutBackSchema = zod_1.z.enum(documentsWithoutBack);
exports.identificationDocumentTypeSchema = identificationDocumentTypeWithBackSchema.or(identificationDocumentTypeWithoutBackSchema);
exports.personalDataAndDocumentsKycSchema = zod_1.z.object({
    firstName: zod_1.z.string(),
    middleName: zod_1.z.string().optional(),
    lastName: zod_1.z.string(),
    dateOfBirth: zod_1.z.object({
        day: zod_1.z.string(),
        month: zod_1.z.string(),
        year: zod_1.z.string(),
    }),
    address: zod_1.z.object({
        address1: zod_1.z.string(),
        address2: zod_1.z.string().optional(),
        isoCountryCode: zod_1.z.string(),
        isoRegionCode: zod_1.z.string(),
        city: zod_1.z.string(),
        postalCode: zod_1.z.string().optional(),
    }),
    phoneNumber: zod_1.z.string(),
    selfieDocument: zod_1.z.string(),
    identificationDocument: zod_1.z.string(),
}, { description: 'personalDataAndDocumentsKycSchema' });
exports.personalDataAndDocumentsDetailedKycSchema = exports.personalDataAndDocumentsKycSchema
    .omit({ identificationDocument: true })
    .and(zod_1.z.object({
    email: zod_1.z.string().regex(common_1.EMAIL_REGEX),
    identificationDocumentFront: zod_1.z.string(),
}))
    .and(zod_1.z
    .object({
    identificationDocumentType: identificationDocumentTypeWithBackSchema,
    identificationDocumentBack: zod_1.z.string(),
})
    .or(zod_1.z.object({
    identificationDocumentType: identificationDocumentTypeWithoutBackSchema,
})));
exports.kycSchemasSchema = zod_1.z.object({
    [exports.kycSchemaSchema.enum.PersonalDataAndDocuments]: exports.personalDataAndDocumentsKycSchema,
    [exports.kycSchemaSchema.enum.PersonalDataAndDocumentsDetailed]: exports.personalDataAndDocumentsDetailedKycSchema,
}, { description: 'kycSchemasSchema' });
/*
/ KYC Endpoint Types
*/
// Path parameters for all KYC endpoints
exports.kycRequestParamsSchema = zod_1.z.object({
    kycSchema: exports.kycSchemaSchema,
}, { description: 'kycRequestParamsSchema' });
// Response body for POST /kyc/:kycSchema and GET /kyc/:kycSchema/status
exports.kycStatusResponseSchema = zod_1.z.object({
    kycStatus: exports.kycStatusSchema,
}, { description: 'kycStatusResponseSchema' });
//# sourceMappingURL=kyc.js.map