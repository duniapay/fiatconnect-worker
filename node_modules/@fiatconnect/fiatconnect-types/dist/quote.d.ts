import { z } from 'zod';
export declare enum FeeType {
    KycFee = "KycFee",
    PlatformFee = "PlatformFee"
}
export declare const feeTypeSchema: z.ZodNativeEnum<typeof FeeType>;
export declare enum FeeFrequency {
    OneTime = "OneTime",
    Recurring = "Recurring"
}
export declare const feeFrequencySchema: z.ZodNativeEnum<typeof FeeFrequency>;
export declare const quoteRequestBodySchema: z.ZodObject<{
    fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
    cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
    address: z.ZodString;
    fiatAmount: z.ZodOptional<z.ZodString>;
    cryptoAmount: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    region: z.ZodOptional<z.ZodString>;
    preview: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    country: string;
    address: string;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    fiatAmount?: string | undefined;
    cryptoAmount?: string | undefined;
    region?: string | undefined;
    preview?: boolean | undefined;
}, {
    country: string;
    address: string;
    fiatType: import("./common").FiatType;
    cryptoType: import("./common").CryptoType;
    fiatAmount?: string | undefined;
    cryptoAmount?: string | undefined;
    region?: string | undefined;
    preview?: boolean | undefined;
}>;
export type QuoteRequestBody = z.infer<typeof quoteRequestBodySchema>;
export declare const quoteErrorResponseSchema: z.ZodObject<{
    error: z.ZodNativeEnum<typeof import("./common").FiatConnectError>;
    minimumFiatAmount: z.ZodOptional<z.ZodString>;
    maximumFiatAmount: z.ZodOptional<z.ZodString>;
    minimumCryptoAmount: z.ZodOptional<z.ZodString>;
    maximumCryptoAmount: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: import("./common").FiatConnectError;
    minimumFiatAmount?: string | undefined;
    maximumFiatAmount?: string | undefined;
    minimumCryptoAmount?: string | undefined;
    maximumCryptoAmount?: string | undefined;
}, {
    error: import("./common").FiatConnectError;
    minimumFiatAmount?: string | undefined;
    maximumFiatAmount?: string | undefined;
    minimumCryptoAmount?: string | undefined;
    maximumCryptoAmount?: string | undefined;
}>;
export type QuoteErrorResponse = z.infer<typeof quoteErrorResponseSchema>;
export declare const quoteResponseKycSchemaSchema: z.ZodObject<{
    kycSchema: z.ZodNativeEnum<typeof import("./kyc").KycSchema>;
    allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
}, "strip", z.ZodTypeAny, {
    kycSchema: import("./kyc").KycSchema;
    allowedValues: Record<string, [string, ...string[]]>;
}, {
    kycSchema: import("./kyc").KycSchema;
    allowedValues: Record<string, [string, ...string[]]>;
}>;
export type QuoteResponseKycSchema = z.infer<typeof quoteResponseKycSchemaSchema>;
export declare const quoteResponseFiatAccountSchemaSchema: z.ZodObject<{
    fiatAccountSchema: z.ZodNativeEnum<typeof import("./fiat-account").FiatAccountSchema>;
    allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
    userActionType: z.ZodOptional<z.ZodNativeEnum<typeof import("./common").TransferInUserActionDetails>>;
}, "strip", z.ZodTypeAny, {
    fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
    allowedValues: Record<string, [string, ...string[]]>;
    userActionType?: import("./common").TransferInUserActionDetails | undefined;
}, {
    fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
    allowedValues: Record<string, [string, ...string[]]>;
    userActionType?: import("./common").TransferInUserActionDetails | undefined;
}>;
export type QuoteResponseFiatAccountSchema = z.infer<typeof quoteResponseFiatAccountSchemaSchema>;
export declare const fiatAccountTypeQuoteDataSchema: z.ZodObject<{
    fiatAccountSchemas: z.ZodArray<z.ZodObject<{
        fiatAccountSchema: z.ZodNativeEnum<typeof import("./fiat-account").FiatAccountSchema>;
        allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
        userActionType: z.ZodOptional<z.ZodNativeEnum<typeof import("./common").TransferInUserActionDetails>>;
    }, "strip", z.ZodTypeAny, {
        fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
        allowedValues: Record<string, [string, ...string[]]>;
        userActionType?: import("./common").TransferInUserActionDetails | undefined;
    }, {
        fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
        allowedValues: Record<string, [string, ...string[]]>;
        userActionType?: import("./common").TransferInUserActionDetails | undefined;
    }>, "many">;
    settlementTimeLowerBound: z.ZodOptional<z.ZodString>;
    settlementTimeUpperBound: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fiatAccountSchemas: {
        fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
        allowedValues: Record<string, [string, ...string[]]>;
        userActionType?: import("./common").TransferInUserActionDetails | undefined;
    }[];
    settlementTimeLowerBound?: string | undefined;
    settlementTimeUpperBound?: string | undefined;
}, {
    fiatAccountSchemas: {
        fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
        allowedValues: Record<string, [string, ...string[]]>;
        userActionType?: import("./common").TransferInUserActionDetails | undefined;
    }[];
    settlementTimeLowerBound?: string | undefined;
    settlementTimeUpperBound?: string | undefined;
}>;
export type FiatAccountTypeQuoteData = z.infer<typeof fiatAccountTypeQuoteDataSchema>;
export declare const quoteResponseSchema: z.ZodObject<{
    quote: z.ZodIntersection<z.ZodObject<{
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        fiatAmount: z.ZodString;
        cryptoAmount: z.ZodString;
        guaranteedUntil: z.ZodString;
        transferType: z.ZodNativeEnum<typeof import("./transfer").TransferType>;
        fee: z.ZodOptional<z.ZodString>;
        feeType: z.ZodOptional<z.ZodNativeEnum<typeof FeeType>>;
        feeFrequency: z.ZodOptional<z.ZodNativeEnum<typeof FeeFrequency>>;
    }, "strip", z.ZodTypeAny, {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    }, {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    }>, z.ZodObject<{
        quoteId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        quoteId: string;
    }, {
        quoteId: string;
    }>>;
    kyc: z.ZodObject<{
        kycRequired: z.ZodBoolean;
        kycSchemas: z.ZodArray<z.ZodObject<{
            kycSchema: z.ZodNativeEnum<typeof import("./kyc").KycSchema>;
            allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
        }, "strip", z.ZodTypeAny, {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }, {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    }, {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    }>;
    fiatAccount: z.ZodRecord<z.ZodNativeEnum<typeof import("./fiat-account").FiatAccountType>, z.ZodObject<{
        fiatAccountSchemas: z.ZodArray<z.ZodObject<{
            fiatAccountSchema: z.ZodNativeEnum<typeof import("./fiat-account").FiatAccountSchema>;
            allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
            userActionType: z.ZodOptional<z.ZodNativeEnum<typeof import("./common").TransferInUserActionDetails>>;
        }, "strip", z.ZodTypeAny, {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }, {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }>, "many">;
        settlementTimeLowerBound: z.ZodOptional<z.ZodString>;
        settlementTimeUpperBound: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    quote: {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    } & {
        quoteId: string;
    };
    kyc: {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    };
    fiatAccount: Partial<Record<import("./fiat-account").FiatAccountType, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }>>;
}, {
    quote: {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    } & {
        quoteId: string;
    };
    kyc: {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    };
    fiatAccount: Partial<Record<import("./fiat-account").FiatAccountType, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }>>;
}>;
export type QuoteResponse = z.infer<typeof quoteResponseSchema>;
export declare const quotePreviewResponseSchema: z.ZodObject<{
    quote: z.ZodObject<{
        fiatType: z.ZodNativeEnum<typeof import("./common").FiatType>;
        cryptoType: z.ZodNativeEnum<typeof import("./common").CryptoType>;
        fiatAmount: z.ZodString;
        cryptoAmount: z.ZodString;
        guaranteedUntil: z.ZodString;
        transferType: z.ZodNativeEnum<typeof import("./transfer").TransferType>;
        fee: z.ZodOptional<z.ZodString>;
        feeType: z.ZodOptional<z.ZodNativeEnum<typeof FeeType>>;
        feeFrequency: z.ZodOptional<z.ZodNativeEnum<typeof FeeFrequency>>;
    }, "strip", z.ZodTypeAny, {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    }, {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    }>;
    kyc: z.ZodObject<{
        kycRequired: z.ZodBoolean;
        kycSchemas: z.ZodArray<z.ZodObject<{
            kycSchema: z.ZodNativeEnum<typeof import("./kyc").KycSchema>;
            allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
        }, "strip", z.ZodTypeAny, {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }, {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    }, {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    }>;
    fiatAccount: z.ZodRecord<z.ZodNativeEnum<typeof import("./fiat-account").FiatAccountType>, z.ZodObject<{
        fiatAccountSchemas: z.ZodArray<z.ZodObject<{
            fiatAccountSchema: z.ZodNativeEnum<typeof import("./fiat-account").FiatAccountSchema>;
            allowedValues: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "atleastone">>;
            userActionType: z.ZodOptional<z.ZodNativeEnum<typeof import("./common").TransferInUserActionDetails>>;
        }, "strip", z.ZodTypeAny, {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }, {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }>, "many">;
        settlementTimeLowerBound: z.ZodOptional<z.ZodString>;
        settlementTimeUpperBound: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    quote: {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    };
    kyc: {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    };
    fiatAccount: Partial<Record<import("./fiat-account").FiatAccountType, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }>>;
}, {
    quote: {
        transferType: import("./transfer").TransferType;
        fiatType: import("./common").FiatType;
        cryptoType: import("./common").CryptoType;
        fiatAmount: string;
        cryptoAmount: string;
        guaranteedUntil: string;
        fee?: string | undefined;
        feeType?: FeeType | undefined;
        feeFrequency?: FeeFrequency | undefined;
    };
    kyc: {
        kycRequired: boolean;
        kycSchemas: {
            kycSchema: import("./kyc").KycSchema;
            allowedValues: Record<string, [string, ...string[]]>;
        }[];
    };
    fiatAccount: Partial<Record<import("./fiat-account").FiatAccountType, {
        fiatAccountSchemas: {
            fiatAccountSchema: import("./fiat-account").FiatAccountSchema;
            allowedValues: Record<string, [string, ...string[]]>;
            userActionType?: import("./common").TransferInUserActionDetails | undefined;
        }[];
        settlementTimeLowerBound?: string | undefined;
        settlementTimeUpperBound?: string | undefined;
    }>>;
}>;
export type QuotePreviewResponse = z.infer<typeof quotePreviewResponseSchema>;
