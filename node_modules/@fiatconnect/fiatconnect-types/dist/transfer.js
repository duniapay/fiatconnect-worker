"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferStatusResponseSchema = exports.transferOutStatusResponseSchema = exports.transferInStatusResponseSchema = exports.transferStatusRequestParamsSchema = exports.transferResponseSchema = exports.transferInResponseSchema = exports.transferOutResponseSchema = exports.transferRequestBodySchema = exports.transferOutStatusSchema = exports.transferInStatusPostTxSchema = exports.transferInStatusPreTxSchema = exports.transferStatusSchema = exports.TransferStatus = exports.transferTypeSchema = exports.TransferType = void 0;
const zod_1 = require("zod");
const common_1 = require("./common");
const fiat_account_1 = require("./fiat-account");
var TransferType;
(function (TransferType) {
    TransferType["TransferIn"] = "TransferIn";
    TransferType["TransferOut"] = "TransferOut";
})(TransferType || (exports.TransferType = TransferType = {}));
exports.transferTypeSchema = zod_1.z.nativeEnum(TransferType, {
    description: 'transferTypeSchema',
});
var TransferStatus;
(function (TransferStatus) {
    TransferStatus["TransferStarted"] = "TransferStarted";
    TransferStatus["TransferWaitingForUserAction"] = "TransferWaitingForUserAction";
    TransferStatus["TransferFiatFundsDebited"] = "TransferFiatFundsDebited";
    TransferStatus["TransferReceivedFiatFunds"] = "TransferReceivedFiatFunds";
    TransferStatus["TransferSendingCryptoFunds"] = "TransferSendingCryptoFunds";
    TransferStatus["TransferAmlFailed"] = "TransferAmlFailed";
    TransferStatus["TransferReadyForUserToSendCryptoFunds"] = "TransferReadyForUserToSendCryptoFunds";
    TransferStatus["TransferReceivedCryptoFunds"] = "TransferReceivedCryptoFunds";
    TransferStatus["TransferComplete"] = "TransferComplete";
    TransferStatus["TransferFailed"] = "TransferFailed";
})(TransferStatus || (exports.TransferStatus = TransferStatus = {}));
exports.transferStatusSchema = zod_1.z.nativeEnum(TransferStatus, {
    description: 'transferStatusSchema',
});
// Transfer status schemas are first segmented between transfers in and transfers out
// since they both allow a slightly different set of statuses.
// Transfer in statuses are further segmented, since once a transfer in
// progresses to sending the user funds, providers are expected
// to return new metadata about the transfer. This segmentation allows
// us to encode those semantics into Zod schemas.
exports.transferInStatusPreTxSchema = zod_1.z.enum([
    TransferStatus.TransferStarted,
    TransferStatus.TransferWaitingForUserAction,
    TransferStatus.TransferFiatFundsDebited,
    TransferStatus.TransferReceivedFiatFunds,
    TransferStatus.TransferFailed,
], {
    description: 'transferInStatusPreTxSchema',
});
exports.transferInStatusPostTxSchema = zod_1.z.enum([TransferStatus.TransferSendingCryptoFunds, TransferStatus.TransferComplete], {
    description: 'transferInStatusPostTxSchema',
});
exports.transferOutStatusSchema = zod_1.z.enum([
    TransferStatus.TransferStarted,
    TransferStatus.TransferAmlFailed,
    TransferStatus.TransferReadyForUserToSendCryptoFunds,
    TransferStatus.TransferReceivedCryptoFunds,
    TransferStatus.TransferComplete,
    TransferStatus.TransferFailed,
], {
    description: 'transferOutStatusSchema',
});
/*
/ Transfer Endpoint Types
*/
exports.transferRequestBodySchema = zod_1.z.object({
    fiatAccountId: fiat_account_1.fiatAccountIdSchema,
    quoteId: zod_1.z.string(),
}, { description: 'transferRequestBodySchema' });
exports.transferOutResponseSchema = zod_1.z.object({
    transferId: zod_1.z.string(),
    transferStatus: exports.transferStatusSchema,
    transferAddress: zod_1.z.string(),
}, { description: 'transferOutResponseSchema' });
exports.transferInResponseSchema = zod_1.z.object({
    transferId: zod_1.z.string(),
    transferStatus: exports.transferStatusSchema,
    transferAddress: zod_1.z.string(),
    userActionDetails: common_1.userActionDetailsSchema.optional(),
}, { description: 'transferInResponseSchema' });
exports.transferResponseSchema = exports.transferInResponseSchema.or(exports.transferOutResponseSchema);
exports.transferStatusRequestParamsSchema = zod_1.z.object({
    transferId: zod_1.z.string(),
}, { description: 'transferStatusRequestParamsSchema' });
const transferInStatusPreTxResponseSchema = zod_1.z.object({
    status: exports.transferInStatusPreTxSchema,
    transferType: zod_1.z.literal(TransferType.TransferIn),
    fiatType: common_1.fiatTypeSchema,
    cryptoType: common_1.cryptoTypeSchema,
    amountProvided: zod_1.z.string(),
    amountReceived: zod_1.z.string(),
    fee: zod_1.z.string().optional(),
    fiatAccountId: fiat_account_1.fiatAccountIdSchema,
    transferId: zod_1.z.string(),
    transferAddress: zod_1.z.string(),
    userActionDetails: common_1.userActionDetailsSchema.optional(),
}, { description: 'transferInStatusPreTxResponseSchema' });
const transferInStatusPostTxResponseSchema = zod_1.z.object(transferInStatusPreTxResponseSchema.extend({
    status: exports.transferInStatusPostTxSchema,
    txHash: zod_1.z.string(),
}).shape, { description: 'transferInStatusPostTxResponseSchema' });
exports.transferInStatusResponseSchema = transferInStatusPreTxResponseSchema.or(transferInStatusPostTxResponseSchema);
exports.transferOutStatusResponseSchema = zod_1.z.object(transferInStatusPreTxResponseSchema.extend({
    transferType: zod_1.z.literal(TransferType.TransferOut),
    status: exports.transferOutStatusSchema,
}).shape, { description: 'transferOutStatusResponseSchema' });
exports.transferStatusResponseSchema = exports.transferInStatusResponseSchema.or(exports.transferOutStatusResponseSchema);
//# sourceMappingURL=transfer.js.map