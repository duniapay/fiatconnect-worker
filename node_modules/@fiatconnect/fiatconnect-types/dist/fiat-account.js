"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postFiatAccountResponseSchema = exports.getFiatAccountsResponseSchema = exports.deleteFiatAccountRequestParamsSchema = exports.postFiatAccountRequestBodySchema = exports.obfuscatedFiatAccountDataSchema = exports.fiatAccountIdSchema = exports.fiatAccountSchemasSchema = exports.iFSCAccountSchema = exports.iBANNumberSchema = exports.mobileMoneySchema = exports.duniaWalletSchema = exports.accountNumberSchema = exports.pixAccountSchema = exports.PIX_PHONE_KEY_REGEX = exports.PIX_CPF_KEY_REGEX = exports.pixKeyTypeEnumSchema = exports.PIXKeyTypeEnum = exports.fiatAccountTypeSchema = exports.FiatAccountType = exports.fiatAccountSchemaSchema = exports.FiatAccountSchema = void 0;
const zod_1 = require("zod");
const common_1 = require("./common");
/*
 * FiatConnect dynamic type definitions.
 *
 * The following types contain information about different fiat account types,
 * that are currently supported by payment providers. The types can be added to via a pull request to the FiatConnect
 * specification repo -- for example, when support for a new account type is added.
 *
 */
// When adding new schemas remember to also update fiatAccountSchemasSchema and postFiatAccountRequestBodySchema
var FiatAccountSchema;
(function (FiatAccountSchema) {
    FiatAccountSchema["AccountNumber"] = "AccountNumber";
    FiatAccountSchema["MobileMoney"] = "MobileMoney";
    FiatAccountSchema["DuniaWallet"] = "DuniaWallet";
    FiatAccountSchema["IBANNumber"] = "IBANNumber";
    FiatAccountSchema["IFSCAccount"] = "IFSCAccount";
    FiatAccountSchema["PIXAccount"] = "PIXAccount";
})(FiatAccountSchema || (exports.FiatAccountSchema = FiatAccountSchema = {}));
exports.fiatAccountSchemaSchema = zod_1.z.nativeEnum(FiatAccountSchema, {
    description: 'fiatAccountSchemaSchema',
});
var FiatAccountType;
(function (FiatAccountType) {
    FiatAccountType["BankAccount"] = "BankAccount";
    FiatAccountType["MobileMoney"] = "MobileMoney";
    FiatAccountType["DuniaWallet"] = "DuniaWallet";
})(FiatAccountType || (exports.FiatAccountType = FiatAccountType = {}));
exports.fiatAccountTypeSchema = zod_1.z.nativeEnum(FiatAccountType, {
    description: 'fiatAccountTypeSchema',
});
var PIXKeyTypeEnum;
(function (PIXKeyTypeEnum) {
    PIXKeyTypeEnum["EMAIL"] = "EMAIL";
    PIXKeyTypeEnum["PHONE"] = "PHONE";
    PIXKeyTypeEnum["CPF"] = "CPF";
    PIXKeyTypeEnum["RANDOM"] = "RANDOM";
})(PIXKeyTypeEnum || (exports.PIXKeyTypeEnum = PIXKeyTypeEnum = {}));
exports.pixKeyTypeEnumSchema = zod_1.z.nativeEnum(PIXKeyTypeEnum, {
    description: 'pixKeyTypeEnumSchema',
});
const requiredFiatAccountSchemaFieldsSchema = zod_1.z.object({
    accountName: zod_1.z.string(),
    institutionName: zod_1.z.string(),
    fiatAccountType: exports.fiatAccountTypeSchema,
});
exports.PIX_CPF_KEY_REGEX = /^([0-9]{3}\.){2}[0-9]{3}[-]([0-9]{2})$/; // example: 000.000.000-00, see https://en.wikipedia.org/wiki/CPF_number
exports.PIX_PHONE_KEY_REGEX = /^[0-9]{11}$/;
exports.pixAccountSchema = requiredFiatAccountSchemaFieldsSchema
    .and(zod_1.z.object({
    fiatAccountType: zod_1.z.literal(FiatAccountType.BankAccount),
}, { description: 'PIXAccountSchema' }))
    .and(zod_1.z
    .object({
    keyType: zod_1.z.literal(PIXKeyTypeEnum.EMAIL),
    key: zod_1.z.string().regex(common_1.EMAIL_REGEX),
})
    .or(zod_1.z.object({
    keyType: zod_1.z.literal(PIXKeyTypeEnum.CPF),
    key: zod_1.z.string().regex(exports.PIX_CPF_KEY_REGEX),
}))
    .or(zod_1.z.object({
    keyType: zod_1.z.literal(PIXKeyTypeEnum.PHONE),
    key: zod_1.z.string().regex(exports.PIX_PHONE_KEY_REGEX),
}))
    .or(zod_1.z.object({
    keyType: zod_1.z.literal(PIXKeyTypeEnum.RANDOM),
    key: zod_1.z.string().uuid(),
})));
exports.accountNumberSchema = requiredFiatAccountSchemaFieldsSchema.and(zod_1.z.object({
    accountNumber: zod_1.z.string(),
    country: zod_1.z.string(),
    fiatAccountType: zod_1.z.literal(FiatAccountType.BankAccount),
}, { description: 'accountNumberSchema' }));
exports.duniaWalletSchema = requiredFiatAccountSchemaFieldsSchema.and(zod_1.z.object({
    mobile: zod_1.z.string(),
    fiatAccountType: zod_1.z.literal(FiatAccountType.DuniaWallet),
}, { description: 'duniaWalletSchema' }));
exports.mobileMoneySchema = requiredFiatAccountSchemaFieldsSchema.and(zod_1.z.object({
    mobile: zod_1.z.string(),
    country: zod_1.z.string(),
    operator: zod_1.z.string(),
    fiatAccountType: zod_1.z.literal(FiatAccountType.MobileMoney),
}, { description: 'mobileMoneySchema' }));
exports.iBANNumberSchema = requiredFiatAccountSchemaFieldsSchema.and(zod_1.z.object({
    iban: zod_1.z.string(),
    country: zod_1.z.string(),
    fiatAccountType: zod_1.z.literal(FiatAccountType.BankAccount),
}, { description: 'iBANNumberSchema' }));
exports.iFSCAccountSchema = requiredFiatAccountSchemaFieldsSchema.and(zod_1.z.object({
    ifsc: zod_1.z.string(),
    accountNumber: zod_1.z.string(),
    country: zod_1.z.string(),
    fiatAccountType: zod_1.z.literal(FiatAccountType.BankAccount),
}, { description: 'iFSCAccountSchema' }));
// Map of all supported fiat account schemas to the corresponding schema type. List must be manually updated
exports.fiatAccountSchemasSchema = zod_1.z.object({
    [FiatAccountSchema.AccountNumber]: exports.accountNumberSchema,
    [FiatAccountSchema.MobileMoney]: exports.mobileMoneySchema,
    [FiatAccountSchema.DuniaWallet]: exports.duniaWalletSchema,
    [FiatAccountSchema.IBANNumber]: exports.iBANNumberSchema,
    [FiatAccountSchema.IFSCAccount]: exports.iFSCAccountSchema,
    [FiatAccountSchema.PIXAccount]: exports.pixAccountSchema,
}, { description: 'fiatAccountSchemasSchema' });
exports.fiatAccountIdSchema = zod_1.z.string({
    description: 'fiatAccountIdSchema',
});
exports.obfuscatedFiatAccountDataSchema = zod_1.z.object({
    fiatAccountId: exports.fiatAccountIdSchema,
    accountName: zod_1.z.string(),
    institutionName: zod_1.z.string(),
    fiatAccountType: exports.fiatAccountTypeSchema,
    fiatAccountSchema: exports.fiatAccountSchemaSchema,
}, { description: 'obfuscatedFiatAccountDataSchema' });
/*
/ Fiat Account Endpoint Types
*/
// must be manually updated with new schemas
exports.postFiatAccountRequestBodySchema = zod_1.z.union([
    zod_1.z.object({
        fiatAccountSchema: zod_1.z.literal(exports.fiatAccountSchemaSchema.enum.AccountNumber),
        data: exports.accountNumberSchema,
    }),
    zod_1.z.object({
        fiatAccountSchema: zod_1.z.literal(exports.fiatAccountSchemaSchema.enum.DuniaWallet),
        data: exports.duniaWalletSchema,
    }),
    zod_1.z.object({
        fiatAccountSchema: zod_1.z.literal(exports.fiatAccountSchemaSchema.enum.MobileMoney),
        data: exports.mobileMoneySchema,
    }),
    zod_1.z.object({
        fiatAccountSchema: zod_1.z.literal(exports.fiatAccountSchemaSchema.enum.IBANNumber),
        data: exports.iBANNumberSchema,
    }),
    zod_1.z.object({
        fiatAccountSchema: zod_1.z.literal(exports.fiatAccountSchemaSchema.enum.IFSCAccount),
        data: exports.iFSCAccountSchema,
    }),
    zod_1.z.object({
        fiatAccountSchema: zod_1.z.literal(exports.fiatAccountSchemaSchema.enum.PIXAccount),
        data: exports.pixAccountSchema,
    }),
], { description: 'postFiatAccountRequestBodySchema' });
exports.deleteFiatAccountRequestParamsSchema = zod_1.z.object({
    fiatAccountId: exports.fiatAccountIdSchema,
}, { description: 'deleteFiatAccountRequestParamsSchema' });
exports.getFiatAccountsResponseSchema = zod_1.z.record(exports.fiatAccountTypeSchema, zod_1.z.array(exports.obfuscatedFiatAccountDataSchema), { description: 'getFiatAccountsResponseSchema' });
exports.postFiatAccountResponseSchema = exports.obfuscatedFiatAccountDataSchema;
//# sourceMappingURL=fiat-account.js.map