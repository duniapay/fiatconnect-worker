"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.quotePreviewResponseSchema = exports.quoteResponseSchema = exports.fiatAccountTypeQuoteDataSchema = exports.quoteResponseFiatAccountSchemaSchema = exports.quoteResponseKycSchemaSchema = exports.quoteErrorResponseSchema = exports.quoteRequestBodySchema = exports.feeFrequencySchema = exports.FeeFrequency = exports.feeTypeSchema = exports.FeeType = void 0;
const zod_1 = require("zod");
const common_1 = require("./common");
const fiat_account_1 = require("./fiat-account");
const kyc_1 = require("./kyc");
const transfer_1 = require("./transfer");
var FeeType;
(function (FeeType) {
    FeeType["KycFee"] = "KycFee";
    FeeType["PlatformFee"] = "PlatformFee";
})(FeeType || (exports.FeeType = FeeType = {}));
exports.feeTypeSchema = zod_1.z.nativeEnum(FeeType, {
    description: 'feeTypeSchema',
});
var FeeFrequency;
(function (FeeFrequency) {
    FeeFrequency["OneTime"] = "OneTime";
    FeeFrequency["Recurring"] = "Recurring";
})(FeeFrequency || (exports.FeeFrequency = FeeFrequency = {}));
exports.feeFrequencySchema = zod_1.z.nativeEnum(FeeFrequency, {
    description: 'feeFrequencySchema',
});
/*
/ Quote Endpoint Types
*/
exports.quoteRequestBodySchema = zod_1.z.object({
    fiatType: common_1.fiatTypeSchema,
    cryptoType: common_1.cryptoTypeSchema,
    address: zod_1.z.string(),
    fiatAmount: zod_1.z.string().optional(),
    cryptoAmount: zod_1.z.string().optional(),
    country: zod_1.z.string(),
    region: zod_1.z.string().optional(),
    preview: zod_1.z.boolean().optional(),
}, { description: 'quoteRequestBodySchema' });
exports.quoteErrorResponseSchema = zod_1.z.object({
    error: common_1.fiatConnectErrorSchema,
    minimumFiatAmount: zod_1.z.string().optional(),
    maximumFiatAmount: zod_1.z.string().optional(),
    minimumCryptoAmount: zod_1.z.string().optional(),
    maximumCryptoAmount: zod_1.z.string().optional(),
}, { description: 'quoteErrorResponseSchema' });
// Helper type
exports.quoteResponseKycSchemaSchema = zod_1.z.object({
    kycSchema: kyc_1.kycSchemaSchema,
    allowedValues: zod_1.z.record(zod_1.z.array(zod_1.z.string()).nonempty()),
}, { description: 'quoteResponseKycSchemaSchema' });
// Helper type
exports.quoteResponseFiatAccountSchemaSchema = zod_1.z.object({
    fiatAccountSchema: fiat_account_1.fiatAccountSchemaSchema,
    allowedValues: zod_1.z.record(zod_1.z.array(zod_1.z.string()).nonempty()),
    userActionType: common_1.transferInUserActionDetailsSchema.optional(),
}, { description: 'quoteResponseFiatAccountSchemaSchema' });
// Helper type
exports.fiatAccountTypeQuoteDataSchema = zod_1.z.object({
    fiatAccountSchemas: zod_1.z.array(exports.quoteResponseFiatAccountSchemaSchema),
    settlementTimeLowerBound: zod_1.z.string().optional(),
    settlementTimeUpperBound: zod_1.z.string().optional(), // ISO-8601 Duration
}, { description: 'fiatAccountTypeQuoteDataSchema' });
const _quoteResponseQuoteObject = zod_1.z.object({
    fiatType: common_1.fiatTypeSchema,
    cryptoType: common_1.cryptoTypeSchema,
    fiatAmount: zod_1.z.string(),
    cryptoAmount: zod_1.z.string(),
    guaranteedUntil: zod_1.z.string(),
    transferType: transfer_1.transferTypeSchema,
    fee: zod_1.z.string().optional(),
    feeType: exports.feeTypeSchema.optional(),
    feeFrequency: exports.feeFrequencySchema.optional(),
});
const _quoteResponseKycObject = zod_1.z.object({
    kycRequired: zod_1.z.boolean(),
    kycSchemas: zod_1.z.array(exports.quoteResponseKycSchemaSchema),
});
const _quoteResponseFiatAccountObject = zod_1.z.record(fiat_account_1.fiatAccountTypeSchema, exports.fiatAccountTypeQuoteDataSchema);
exports.quoteResponseSchema = zod_1.z.object({
    quote: _quoteResponseQuoteObject.and(zod_1.z.object({ quoteId: zod_1.z.string() })),
    kyc: _quoteResponseKycObject,
    fiatAccount: _quoteResponseFiatAccountObject,
}, { description: 'quoteResponseSchema' });
exports.quotePreviewResponseSchema = zod_1.z.object({
    quote: _quoteResponseQuoteObject,
    kyc: _quoteResponseKycObject,
    fiatAccount: _quoteResponseFiatAccountObject,
}, { description: 'quotePreviewResponseSchema' });
//# sourceMappingURL=quote.js.map