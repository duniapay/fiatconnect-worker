"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userActionDetailsSchema = exports.accountNumberUserActionSchema = exports.urlUserActionSchema = exports.pseUserActionSchema = exports.ibanUserActionSchema = exports.pixUserActionSchema = exports.transferInUserActionDetailsSchema = exports.TransferInUserActionDetails = exports.EMAIL_REGEX = exports.cryptoTypeSchema = exports.CryptoType = exports.fiatTypeSchema = exports.FiatType = exports.networkSchema = exports.Network = exports.fiatConnectErrorSchema = exports.FiatConnectError = void 0;
const zod_1 = require("zod");
// Errors returned by FiatConnect endpoints
var FiatConnectError;
(function (FiatConnectError) {
    FiatConnectError["InvalidSignature"] = "InvalidSignature";
    FiatConnectError["GeoNotSupported"] = "GeoNotSupported";
    FiatConnectError["CryptoAmountTooLow"] = "CryptoAmountTooLow";
    FiatConnectError["CryptoAmountTooHigh"] = "CryptoAmountTooHigh";
    FiatConnectError["FiatAmountTooLow"] = "FiatAmountTooLow";
    FiatConnectError["FiatAmountTooHigh"] = "FiatAmountTooHigh";
    FiatConnectError["CryptoNotSupported"] = "CryptoNotSupported";
    FiatConnectError["FiatNotSupported"] = "FiatNotSupported";
    FiatConnectError["UnsupportedSchema"] = "UnsupportedSchema";
    FiatConnectError["InvalidSchema"] = "InvalidSchema";
    FiatConnectError["ResourceExists"] = "ResourceExists";
    FiatConnectError["ResourceNotFound"] = "ResourceNotFound";
    FiatConnectError["TransferNotAllowed"] = "TransferNotAllowed";
    FiatConnectError["KycExpired"] = "KycExpired";
    FiatConnectError["Unauthorized"] = "Unauthorized";
    FiatConnectError["SessionExpired"] = "SessionExpired";
    FiatConnectError["InvalidParameters"] = "InvalidParameters";
    FiatConnectError["ContractLoginNotSupported"] = "ContractLoginNotSupported";
    FiatConnectError["NonceInUse"] = "NonceInUse";
    FiatConnectError["IssuedTooEarly"] = "IssuedTooEarly";
    FiatConnectError["ExpirationTooLong"] = "ExpirationTooLong";
    FiatConnectError["InvalidFiatAccount"] = "InvalidFiatAccount";
    FiatConnectError["InvalidQuote"] = "InvalidQuote";
})(FiatConnectError || (exports.FiatConnectError = FiatConnectError = {}));
exports.fiatConnectErrorSchema = zod_1.z.nativeEnum(FiatConnectError, {
    description: 'fiatConnectErrorSchema',
});
var Network;
(function (Network) {
    Network["Alfajores"] = "Alfajores";
    Network["Mainnet"] = "Mainnet";
})(Network || (exports.Network = Network = {}));
exports.networkSchema = zod_1.z.nativeEnum(Network, {
    description: 'networkSchema',
});
/*
 * FiatConnect dynamic type definitions.
 *
 * The following types contain information about currencies, tokens,
 * that are currently supported by payment providers. The types can be added to via a pull request to the FiatConnect
 * specification repo -- for example, when support for a new currency type is added.
 *
 */
var FiatType;
(function (FiatType) {
    FiatType["USD"] = "USD";
    FiatType["EUR"] = "EUR";
    FiatType["BRL"] = "BRL";
    FiatType["GNF"] = "GNF";
    FiatType["INR"] = "INR";
    FiatType["NGN"] = "NGN";
    FiatType["GHS"] = "GHS";
    FiatType["KES"] = "KES";
    FiatType["ZAR"] = "ZAR";
    FiatType["PHP"] = "PHP";
    FiatType["UGX"] = "UGX";
    FiatType["GBP"] = "GBP";
    FiatType["XOF"] = "XOF";
    FiatType["RWF"] = "RWF";
    FiatType["CNY"] = "CNY";
    FiatType["XAF"] = "XAF";
    FiatType["ARS"] = "ARS";
    FiatType["BOB"] = "BOB";
    FiatType["CLP"] = "CLP";
    FiatType["COP"] = "COP";
    FiatType["FKP"] = "FKP";
    FiatType["GYD"] = "GYD";
    FiatType["PYG"] = "PYG";
    FiatType["PEN"] = "PEN";
    FiatType["SRD"] = "SRD";
    FiatType["UYU"] = "UYU";
    FiatType["VES"] = "VES";
    FiatType["MXN"] = "MXN";
    FiatType["PAB"] = "PAB";
})(FiatType || (exports.FiatType = FiatType = {}));
exports.fiatTypeSchema = zod_1.z.nativeEnum(FiatType, {
    description: 'fiatTypeSchema',
});
var CryptoType;
(function (CryptoType) {
    CryptoType["cUSD"] = "cUSD";
    CryptoType["cEUR"] = "cEUR";
    CryptoType["cREAL"] = "cREAL";
    CryptoType["CELO"] = "CELO";
})(CryptoType || (exports.CryptoType = CryptoType = {}));
exports.cryptoTypeSchema = zod_1.z.nativeEnum(CryptoType, {
    description: 'cryptoTypeSchema',
});
exports.EMAIL_REGEX = 
/* eslint-disable-next-line no-useless-escape */ // For some reason, eslint thinks the escaped \[ and /] are useless. they are indeed useful.
/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; // credit to http://emailregex.com/
var TransferInUserActionDetails;
(function (TransferInUserActionDetails) {
    TransferInUserActionDetails["PIXUserAction"] = "PIXUserAction";
    TransferInUserActionDetails["IBANUserAction"] = "IBANUserAction";
    TransferInUserActionDetails["PSEUserAction"] = "PSEUserAction";
    TransferInUserActionDetails["URLUserAction"] = "URLUserAction";
    TransferInUserActionDetails["AccountNumberUserAction"] = "AccountNumberUserAction";
})(TransferInUserActionDetails || (exports.TransferInUserActionDetails = TransferInUserActionDetails = {}));
exports.transferInUserActionDetailsSchema = zod_1.z.nativeEnum(TransferInUserActionDetails, {
    description: 'transferInUserActionDetailsSchema',
});
exports.pixUserActionSchema = zod_1.z.object({
    userActionType: zod_1.z.literal(TransferInUserActionDetails.PIXUserAction),
    pixString: zod_1.z.string(),
}, { description: 'pixUserActionSchema' });
exports.ibanUserActionSchema = zod_1.z.object({
    userActionType: zod_1.z.literal(TransferInUserActionDetails.IBANUserAction),
    iban: zod_1.z.string(),
    bic: zod_1.z.string(),
}, { description: 'ibanUserActionSchema' });
// @deprecated - use URLUserAction instead
exports.pseUserActionSchema = zod_1.z.object({
    userActionType: zod_1.z.literal(TransferInUserActionDetails.PSEUserAction),
    url: zod_1.z.string(),
}, { description: 'pseUserActionSchema' });
exports.urlUserActionSchema = zod_1.z.object({
    userActionType: zod_1.z.literal(TransferInUserActionDetails.URLUserAction),
    url: zod_1.z.string(),
}, { description: 'urlUserActionSchema' });
exports.accountNumberUserActionSchema = zod_1.z.object({
    userActionType: zod_1.z.literal(TransferInUserActionDetails.AccountNumberUserAction),
    institutionName: zod_1.z.string(),
    accountName: zod_1.z.string(),
    accountNumber: zod_1.z.string(),
    transactionReference: zod_1.z.string().optional(),
    deadline: zod_1.z.string().optional(),
}, { description: 'accountNumberUserActionSchema' });
exports.userActionDetailsSchema = zod_1.z.union([
    exports.pixUserActionSchema,
    exports.ibanUserActionSchema,
    exports.pseUserActionSchema,
    exports.urlUserActionSchema,
    exports.accountNumberUserActionSchema,
]);
//# sourceMappingURL=common.js.map