import { z } from 'zod';
export declare enum FiatConnectError {
    InvalidSignature = "InvalidSignature",
    GeoNotSupported = "GeoNotSupported",
    CryptoAmountTooLow = "CryptoAmountTooLow",
    CryptoAmountTooHigh = "CryptoAmountTooHigh",
    FiatAmountTooLow = "FiatAmountTooLow",
    FiatAmountTooHigh = "FiatAmountTooHigh",
    CryptoNotSupported = "CryptoNotSupported",
    FiatNotSupported = "FiatNotSupported",
    UnsupportedSchema = "UnsupportedSchema",
    InvalidSchema = "InvalidSchema",
    ResourceExists = "ResourceExists",
    ResourceNotFound = "ResourceNotFound",
    TransferNotAllowed = "TransferNotAllowed",
    KycExpired = "KycExpired",
    Unauthorized = "Unauthorized",
    SessionExpired = "SessionExpired",
    InvalidParameters = "InvalidParameters",
    ContractLoginNotSupported = "ContractLoginNotSupported",
    NonceInUse = "NonceInUse",
    IssuedTooEarly = "IssuedTooEarly",
    ExpirationTooLong = "ExpirationTooLong",
    InvalidFiatAccount = "InvalidFiatAccount",
    InvalidQuote = "InvalidQuote"
}
export declare const fiatConnectErrorSchema: z.ZodNativeEnum<typeof FiatConnectError>;
export declare enum Network {
    Alfajores = "Alfajores",
    Mainnet = "Mainnet"
}
export declare const networkSchema: z.ZodNativeEnum<typeof Network>;
export declare enum FiatType {
    USD = "USD",
    EUR = "EUR",
    BRL = "BRL",
    GNF = "GNF",
    INR = "INR",
    NGN = "NGN",
    GHS = "GHS",
    KES = "KES",
    ZAR = "ZAR",
    PHP = "PHP",
    UGX = "UGX",
    GBP = "GBP",
    XOF = "XOF",
    RWF = "RWF",
    CNY = "CNY",
    XAF = "XAF",
    ARS = "ARS",
    BOB = "BOB",
    CLP = "CLP",
    COP = "COP",
    FKP = "FKP",
    GYD = "GYD",
    PYG = "PYG",
    PEN = "PEN",
    SRD = "SRD",
    UYU = "UYU",
    VES = "VES",
    MXN = "MXN",
    PAB = "PAB"
}
export declare const fiatTypeSchema: z.ZodNativeEnum<typeof FiatType>;
export declare enum CryptoType {
    cUSD = "cUSD",
    cEUR = "cEUR",
    cREAL = "cREAL",
    CELO = "CELO"
}
export declare const cryptoTypeSchema: z.ZodNativeEnum<typeof CryptoType>;
export declare const EMAIL_REGEX: RegExp;
export declare enum TransferInUserActionDetails {
    PIXUserAction = "PIXUserAction",
    IBANUserAction = "IBANUserAction",
    PSEUserAction = "PSEUserAction",
    URLUserAction = "URLUserAction",
    AccountNumberUserAction = "AccountNumberUserAction"
}
export declare const transferInUserActionDetailsSchema: z.ZodNativeEnum<typeof TransferInUserActionDetails>;
export declare const pixUserActionSchema: z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.PIXUserAction>;
    pixString: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.PIXUserAction;
    pixString: string;
}, {
    userActionType: TransferInUserActionDetails.PIXUserAction;
    pixString: string;
}>;
export declare const ibanUserActionSchema: z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.IBANUserAction>;
    iban: z.ZodString;
    bic: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.IBANUserAction;
    iban: string;
    bic: string;
}, {
    userActionType: TransferInUserActionDetails.IBANUserAction;
    iban: string;
    bic: string;
}>;
export declare const pseUserActionSchema: z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.PSEUserAction>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.PSEUserAction;
    url: string;
}, {
    userActionType: TransferInUserActionDetails.PSEUserAction;
    url: string;
}>;
export declare const urlUserActionSchema: z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.URLUserAction>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.URLUserAction;
    url: string;
}, {
    userActionType: TransferInUserActionDetails.URLUserAction;
    url: string;
}>;
export declare const accountNumberUserActionSchema: z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.AccountNumberUserAction>;
    institutionName: z.ZodString;
    accountName: z.ZodString;
    accountNumber: z.ZodString;
    transactionReference: z.ZodOptional<z.ZodString>;
    deadline: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.AccountNumberUserAction;
    institutionName: string;
    accountName: string;
    accountNumber: string;
    transactionReference?: string | undefined;
    deadline?: string | undefined;
}, {
    userActionType: TransferInUserActionDetails.AccountNumberUserAction;
    institutionName: string;
    accountName: string;
    accountNumber: string;
    transactionReference?: string | undefined;
    deadline?: string | undefined;
}>;
export declare const userActionDetailsSchema: z.ZodUnion<[z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.PIXUserAction>;
    pixString: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.PIXUserAction;
    pixString: string;
}, {
    userActionType: TransferInUserActionDetails.PIXUserAction;
    pixString: string;
}>, z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.IBANUserAction>;
    iban: z.ZodString;
    bic: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.IBANUserAction;
    iban: string;
    bic: string;
}, {
    userActionType: TransferInUserActionDetails.IBANUserAction;
    iban: string;
    bic: string;
}>, z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.PSEUserAction>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.PSEUserAction;
    url: string;
}, {
    userActionType: TransferInUserActionDetails.PSEUserAction;
    url: string;
}>, z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.URLUserAction>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.URLUserAction;
    url: string;
}, {
    userActionType: TransferInUserActionDetails.URLUserAction;
    url: string;
}>, z.ZodObject<{
    userActionType: z.ZodLiteral<TransferInUserActionDetails.AccountNumberUserAction>;
    institutionName: z.ZodString;
    accountName: z.ZodString;
    accountNumber: z.ZodString;
    transactionReference: z.ZodOptional<z.ZodString>;
    deadline: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    userActionType: TransferInUserActionDetails.AccountNumberUserAction;
    institutionName: string;
    accountName: string;
    accountNumber: string;
    transactionReference?: string | undefined;
    deadline?: string | undefined;
}, {
    userActionType: TransferInUserActionDetails.AccountNumberUserAction;
    institutionName: string;
    accountName: string;
    accountNumber: string;
    transactionReference?: string | undefined;
    deadline?: string | undefined;
}>]>;
export type UserActionDetails = z.infer<typeof userActionDetailsSchema>;
